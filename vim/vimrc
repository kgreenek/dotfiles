set nocompatible

" Auto-install plug and plugins if it doesn't exist already.
" See: https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  "autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

function! BuildYCM(info)
  " info is a dictionary with 3 fields
  " - name:   name of the plugin
  " - status: 'installed', 'updated', or 'unchanged'
  " - force:  set on PlugInstall! or PlugUpdate!
  if a:info.status != 'unchanged' || a:info.force
    !./install.py --clangd-completer --rust-completer --ts-completer
  endif
endfunction

call plug#begin('~/.vim/bundle')
Plug 'JamshedVesuna/vim-markdown-preview'
Plug 'airblade/vim-gitgutter'
Plug 'bazelbuild/vim-ft-bzl'
Plug 'bfrg/vim-cpp-modern'
Plug 'bling/vim-airline'
Plug 'cstrahan/vim-capnp'
Plug 'francoiscabrol/ranger.vim'
Plug 'google/yapf', { 'rtp': 'plugins/vim', 'for': 'python' }
Plug 'grailbio/bazel-compilation-database'
Plug 'junegunn/fzf', { 'dir': '~/.fzf' }
Plug 'junegunn/fzf.vim'
Plug 'rhysd/vim-clang-format', {'for': 'cpp' }
Plug 'rust-lang/rust.vim'
Plug 'tikhomirov/vim-glsl'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'ycm-core/YouCompleteMe', { 'do': function('BuildYCM') }
call plug#end()

filetype plugin indent on

" Ranger settings
" open ranger when vim open a directory
let g:ranger_replace_netrw=1
" Disable the default leader-f keybinding and use ours instead.
let g:ranger_map_keys=0
map <C-n> :Ranger<CR>

" vim-airline settings
" Show buffers at the top if no tabs are open.
let g:airline#extensions#tabline#enabled=1
let g:airline_powerline_fonts=1
let g:airline_left_sep = "\uE0D2"
let g:airline_right_sep = "\uE0D4"

" YouCompleteMe settings
map <C-j> :YcmCompleter GoToDefinitionElseDeclaration<CR>
" Prevent YouCompleteMe from showing a warning every time it loads
" .ycm_extra_conf.py.
let g:ycm_confirm_extra_conf=0
let g:ycm_autoclose_preview_window_after_completion=1

" Recommended settings from: https://clang.llvm.org/extra/clangd/Installation.html
" Let clangd fully control code completion.
let g:ycm_clangd_uses_ycmd_caching = 0

" vim-clang-format settings
" Disabled for now, since projects should specify their own .clang-format
" files and we don't want to over-rule the project-specific settings.
"let g:clang_format#code_style="google"
"let g:clang_format#style_options={
"  \ "AllowShortIfStatementsOnASingleLine" : "true",
"  \ "DerivePointerAlignment" : "false",
"  \ "PointerAlignment" : "Right",
"  \ "Standard" : "C++11",
"  \ "ColumnLimit" : "100" }
autocmd FileType c,cpp,objc nnoremap <C-k> :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <C-k> :ClangFormat<CR>

" rust settings
autocmd FileType rust nnoremap <C-k> :<C-u>RustFmt<CR>
" NOTE: RustFmtRange seems to be broken right now, so this doesn't work.
" See: https://github.com/rust-lang/rust.vim/issues/156
autocmd FileType rust vnoremap <C-k> :'<,'>RustFmtRange<CR>

" Yapf settings
autocmd FileType python nnoremap <C-k> :<C-u>YAPF<CR>
autocmd FileType python vnoremap <C-k> :'<,'>YAPF<CR>

" Use grip with vim-markdown-preview
let vim_markdown_preview_github=1

" netrw settings (vim default file browser)
" Default to tree-view.
let g:netrw_liststyle=3
" Hide banner by default (press "I" to toggle it).
let g:netrw_banner=0

" Create directories if they don't exist.
if !isdirectory($HOME."/.vim/bak")
  call mkdir($HOME."/.vim/bak", "p")
endif
if !isdirectory($HOME."/.vim/swp")
  call mkdir($HOME."/.vim/swp", "p")
endif
if !isdirectory($HOME."/.vim/undo")
  call mkdir($HOME."/.vim/undo", "p")
endif

" Save swp, undo, and backup files in a central location instead of the cwd.
" For Unix and Win32, if a directory ends in two path separators "//" or "\\",
" the swap file name will be built from the complete path to the file with all
" path separators substituted to percent '%' signs. This will ensure file name
" uniqueness in the preserve directory.
set backupdir=$HOME/.vim/bak//
set directory=$HOME/.vim/swp//
set undodir=$HOME/.vim/undo//

" Enable persistent undo, to keep undo history even after the file is closed.
set undofile

" Tell vim where to look for tags file. It'll look in the current directory,
" then the parent directory, and up until it hits HOME (that's what the
" semicolon means).
set tags=./tags,tags;$HOME

" Enables yanking into the system clipboard, so you can "yy" to yank the
" current line, and then paste it to another application.
set clipboard=unnamedplus
if has("unix")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
    " On mac, unnamed appears to do the right thing, and unnamedplus doesn't
    " work.
    set clipboard=unnamed
  endif
endif

" Enable syntax highlighting.
let python_highlight_all=1
syntax on

" This is the default theme used for "dark" terminals.
colorscheme ron

" Show relative line numbers in normal mode, and absolute line numbers when
" unfocused or insert mode.
set number relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Show the current row and column at the bottom.
set ruler

" Show a ruler at important columns.
let &colorcolumn="100"
" Make the ruler orange (goldenrod) instead of the default red.
highlight ColorColumn ctermbg=136

" Size of a hard tabstop.
set tabstop=2

" Size of an "indent".
set shiftwidth=2

" A combination of spaces and tabs are used to simulate tab stops at a width
" other than the (hard)tabstop.
set softtabstop=2

" Make "tab" insert indents instead of tabs at the beginning of a line.
set smarttab

" Always uses spaces instead of tab characters.
set expandtab

" Highlight any trailing whitespace.
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

" Always show the statusline.
set laststatus=2

" Prevent the text from being wrapped automatically.
set textwidth=0
set wrapmargin=0

" Allow backspacing over autoindent, line breaks, and the start of insert.
set backspace=indent,eol,start

" Allow switching buffers without saving the current buffer first.
set hidden

" This controls how often the gitgutter plugin's diff markers are updated.
set updatetime=100

" Jumps to search word as you type.
set incsearch

" Map ctrl-h to move to the previous buffer ":bp", and ctrl-l to move to the
" next buffer "bn".
map <C-h> :bp<CR>
map <C-l> :bn<CR>

" Press jj to exit edit mode to prevent having to stretch to esc.
imap jj <Esc>
