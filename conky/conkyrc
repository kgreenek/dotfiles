-- vim: ts=4 sw=4 noet ai cindent syntax=lua

local function substitute(s, t)
	return s:gsub('(#%b{})', function (w)
		return t[w:sub(3, -2)] or w
	end)
end

local function column(line, col)
	local i = 0
	for word in line:gmatch("%S+") do
		i = i + 1
		if i == col then return word end
	end
	return ""
end

local function default_net_device()
	-- Guess the default net device by assuming the first route is for that device.
	-- The first route is assumed to be the default route.
    local pfile = io.popen('ip route')
	local net_device = column(pfile:lines()(0), 5)
	pfile:close()
	return net_device
end

-- TODO: Find a way for this to update when devices are mounted / unmounted.
local function diskiograph_all(total_width, diskiograph_height, color1, color2)
	local mnt_dir_paths = {}
	local mnt_dir_names = {}
	local mnt_dir_devices = {}
	pfile = io.popen('findmnt -l -o "TARGET,SOURCE" | grep -e "^/ " -e "^/media"')
	local i = 0
	for findmnt_line in pfile:lines() do
		i = i + 1
		local mnt_dir_path = column(findmnt_line, 1)
		local mnt_dir_device = column(findmnt_line, 2)
		local mnt_dir_name = mnt_dir_path:match("^.+/(.+)$")
		if mnt_dir_name == nil then mnt_dir_name = '/' end
		mnt_dir_paths[i] = mnt_dir_path
		mnt_dir_names[mnt_dir_path] = mnt_dir_name
		mnt_dir_devices[mnt_dir_path] = mnt_dir_device
	end
	pfile:close()
	local disks_str = ""
	for i, mnt_dir_path in ipairs(mnt_dir_paths) do
		mnt_dir_name = mnt_dir_names[mnt_dir_path]
		mnt_dir_device = mnt_dir_devices[mnt_dir_path]
		disks_str = disks_str .. substitute([[
${font sans-serif:normal:size=8}#{mnt_dir_name}${goto 100}${fs_used #{mnt_dir_path}} / ${fs_size #{mnt_dir_path}}${alignr}${diskio #{mnt_dir_device}}
${fs_bar #{mnt_dir_path}}
${diskiograph #{mnt_dir_device} #{diskiograph_height},#{total_width} #{color1} #{color2} -t}
]], {
			mnt_dir_name = mnt_dir_name,
			mnt_dir_path = mnt_dir_path,
			mnt_dir_device = mnt_dir_device,
			total_width = total_width,
			diskiograph_height = diskiograph_height,
			color1 = color1,
			color2 = color2,
		})
	end
	return disks_str
end

local function cpugraph_all(total_width, cpugraph_height, padding, color1, color2)
	pfile = io.popen('nproc --all')
	local num_cpus = tonumber(pfile:lines()(0))
	pfile:close()
	local columns = 2
	if num_cpus > 12 then columns = 4
	elseif num_cpus > 8 then columns = 3
	end
	local total_padding = padding * (columns - 1)
	local cpugraph_width = math.floor((total_width - total_padding) / columns)
	local cpus_str = ""
	for i = 1,num_cpus do
		cpus_str = cpus_str .. "${cpugraph cpu" .. i .. " " .. cpugraph_height .. "," ..
			cpugraph_width .. " " .. color1 .. " " .. color2 .. " -t}"
		if i % columns == 0 then
			cpus_str = cpus_str .. '\n'
		else
			cpus_str = cpus_str .. "${offset " .. padding .. "}"
		end
	end
	return cpus_str
end

conky.config = {
	update_interval = 1,
	cpu_avg_samples = 2,
	net_avg_samples = 2,
	out_to_console = false,
	override_utf8_locale = true,
	double_buffer = true,
	no_buffers = true,
	text_buffer_size = 32768,
	imlib_cache_size = 0,
	own_window = true,
	own_window_type = 'normal',
	own_window_argb_visual = true,
	own_window_argb_value = 200,
	own_window_hints = 'undecorated,below,sticky,skip_taskbar,skip_pager',
	border_inner_margin = 5,
	border_outer_margin = 0,
	xinerama_head = 1,
	alignment = 'bottom_right',
	gap_x = 0,
	gap_y = 33,
	draw_shades = false,
	draw_outline = false,
	draw_borders = false,
	draw_graph_borders = false,
	use_xft = true,
	font = 'Ubuntu Mono:size=12',
	xftalpha = 0.8,
	uppercase = false,
	default_color = '#C4A000',
	own_window_colour = '#000000',
	minimum_width = 300,
	minimum_height = 0,
	alignment = 'top_right',
};

custom_variables = {
	orange = 'C4A000',  -- orange
	yellow = 'FCE94F',  -- yellow
	teal = '33E2E2',  -- teal
	green = '89E233',  -- green
	dark_teal = '06989A',  -- dark teal
	pink = 'AD7FA8',  -- pink
	purple = '729ECF',  -- purple
	bright_red = 'EF2828',  -- bright red
	grey = 'CCCCCC',  -- grey

	net_device = default_net_device(),
	all_cpu_graphs = cpugraph_all(300, 30, 20, '33E2E2', 'FCE94F'),
	all_diskio_graphs = diskiograph_all(300, 20, 'CCCCCC', 'FCE94F'),
}

conky.text = substitute([[
${time %H:%M:%S}${alignr}${time %d-%m-%y}
${voffset -16}${font sans-serif:bold:size=18}${alignc}${time %H:%M}${font}
${voffset 4}${alignc}${time %A %B %d, %Y}
${font sans-serif:normal:size=8}${alignc}${nodename} (uptime: ${uptime})

${font sans-serif:bold:size=10}CPU ${hr 2}
${font sans-serif:normal:size=8}${execi 1000 grep model /proc/cpuinfo | cut -d : -f2 | tail -1 | sed 's/\s//'}
#{all_cpu_graphs}
${font sans-serif:bold:size=10}MEMORY ${hr 2}
${font sans-serif:normal:size=8}RAM ${alignc} ${mem} / ${memmax} ${alignr} ${memperc}%
${membar}
SWAP ${alignc} ${swap} / ${swapmax} ${alignr} ${swapperc}%
${swapbar}
${memgraph 60,300 89E233 FCE94F -t}
${font sans-serif:bold:size=10}GPU ${hr 2}
${font sans-serif:normal:size=8}${nvidia modelname}
${font sans-serif:normal:size=8}GPU: ${nvidia gpuutil}%${alignc -25}RAM: ${nvidia membwutil}% (${nvidia memused}/${nvidia memmax} MB)${alignr}PCIe: ${nvidia pcieutil}%
${nvidiagraph gpuutil 20,90 EF2828 FCE94F -t -l}${offset 15}${nvidiagraph membwutil 20,90 EF2828 FCE94F -t -l}${offset 15}${nvidiagraph pcieutil 20,90 EF2828 FCE94F -t -l}
${font sans-serif:bold:size=10}TEMPS ${hr 2}
${font sans-serif:normal:size=8}GPU:${goto 69}+${nvidia temp}Â°C
${font sans-serif:normal:size=8}${exec bash ~/.conky/sensors_cpu_temps.sh}

${font Ubuntu:bold:size=10}NETWORK ${hr 2}
${font sans-serif:normal:size=8}Local IPs:${alignr}External IP:
${execi 1000 ip a | grep inet | grep -vw lo | grep -v inet6 | cut -d \/ -f1 | sed 's/[^0-9\.]*//g'}  ${alignr}${execi 1000  wget -q -o /dev/null -O- http://ipecho.net/plain; echo}
${font sans-serif:normal:size=8}Down: ${downspeed #{net_device}}${alignr}Up: ${upspeed #{net_device}}
${downspeedgraph #{net_device} 80,140 AD7FA8 FCE94F -t}${alignr}${upspeedgraph #{net_device} 80,140 AD7FA8 FCE94F -t}
${font sans-serif:bold:size=10}DISK USAGE ${hr 2}
#{all_diskio_graphs}
${font sans-serif:bold:size=10}TOP PROCESSES ${hr 2}
${font sans-serif:normal:size=8}Name $alignr PID   CPU%   MEM%${font sans-serif:normal:size=8}
${top name 1} ${alignr} ${top pid 1} ${top cpu 1}% ${top mem 1}%
${top name 2} ${alignr} ${top pid 2} ${top cpu 2}% ${top mem 2}%
${top name 3} ${alignr} ${top pid 3} ${top cpu 3}% ${top mem 3}%
${top name 4} ${alignr} ${top pid 4} ${top cpu 4}% ${top mem 4}%
${top name 5} ${alignr} ${top pid 5} ${top cpu 5}% ${top mem 5}%
${top name 6} ${alignr} ${top pid 6} ${top cpu 6}% ${top mem 6}%
${top name 7} ${alignr} ${top pid 7} ${top cpu 7}% ${top mem 7}%
${top name 8} ${alignr} ${top pid 8} ${top cpu 8}% ${top mem 8}%
${top name 9} ${alignr} ${top pid 9} ${top cpu 9}% ${top mem 9}%
${top name 10} ${alignr} ${top pid 10} ${top cpu 10}% ${top mem 10}%
]], custom_variables)
